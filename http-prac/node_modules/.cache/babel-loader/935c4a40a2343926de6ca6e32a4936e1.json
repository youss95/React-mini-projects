{"ast":null,"code":"var _jsxFileName = \"/Users/sayongkim/Documents/react-projects/http-prac/src/App.js\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { useSelector } from \"react-redux\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); //hoisting 으로 인해 useEffect 다음 으로 선언해주어야 함\n\n  const fetchMovie = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://react-test-9dce8-default-rtdb.firebaseio.com/movies.json\");\n      console.log(response);\n\n      if (!response.ok) {\n        throw new Error(\"error!!!!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const addHandler = async movie => {\n    const response = await fetch(\"https://react-test-9dce8-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        id: 1,\n        title: \"hah2\",\n        openingText: \"d2\"\n      }),\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n    console.log(response);\n    const data = await response.json();\n    console.log(\"d\", data);\n  };\n\n  useEffect(() => {\n    console.log(\"s\");\n    fetchMovie();\n  }, [fetchMovie]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"no movies found\");\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    });\n  } //redux에서 관리되는 count 가져오기\n\n\n  const count = useSelector(state => state.counter);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovie,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"addTest\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"counter\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, content), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, count));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sayongkim/Documents/react-projects/http-prac/src/App.js"],"names":["React","useCallback","useEffect","useState","MoviesList","useSelector","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovie","response","fetch","console","log","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","addHandler","movie","method","body","JSON","stringify","headers","content","length","count","state","counter"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { useSelector } from \"react-redux\";\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  //hoisting 으로 인해 useEffect 다음 으로 선언해주어야 함\n  const fetchMovie = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://react-test-9dce8-default-rtdb.firebaseio.com/movies.json\"\n      );\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(\"error!!!!\");\n      }\n      const data = await response.json();\n      console.log(data);\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const addHandler = async (movie) => {\n    const response = await fetch(\n      \"https://react-test-9dce8-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({ id: 1, title: \"hah2\", openingText: \"d2\" }),\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      }\n    );\n    console.log(response);\n    const data = await response.json();\n    console.log(\"d\", data);\n  };\n\n  useEffect(() => {\n    console.log(\"s\");\n    fetchMovie();\n  }, [fetchMovie]);\n\n  let content = <p>no movies found</p>;\n  if (error) {\n    content = <p>{error}</p>;\n  }\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n  //redux에서 관리되는 count 가져오기\n  const count = useSelector((state) => state.counter);\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovie}>Fetch Movies</button>\n        <button onClick={addHandler}>addTest</button>\n        <button>counter</button>\n      </section>\n      <section>{content}</section>\n      <section>{count}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}